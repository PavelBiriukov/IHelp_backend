import { User } from './entities/user.entity';
import { UserService } from './user.service';
import { UpdateUserDto } from './dto/update-user.dto';
import { ChangeStatusDto } from './dto/change-status.dto';
import { ChangeAdminPermissionsDto } from './dto/change-adminPermissions.dto';
import { CreateAdminDto } from './dto/create-admin.dto';
import { CreateUserDto } from './dto/create-user.dto';
import { AdminPermission, EUserRole } from './types';
import { GenerateReportDto } from './dto/generate-report.dto';
export declare class UserController {
    private readonly userService;
    constructor(userService: UserService);
    createAdmin(userData: CreateAdminDto): Promise<User>;
    createUser(userData: CreateUserDto): Promise<User>;
    findBy(query: object): Promise<User[]>;
    getAvatar(id: string, res: any): Promise<any>;
    getOwnUser(user: User): Promise<Omit<User, 'login'> | undefined>;
    generateReport(generateReportDto: GenerateReportDto): Promise<User[]>;
    findAll(): Promise<Omit<User, 'login' | 'password'>[]>;
    getUserById(id: string): Promise<Omit<User, 'login'>>;
    deleteUser(id: string): Promise<void>;
    upload(user: User, file: any): Promise<{
        fullname: string;
        login?: string;
        avatar: string;
        phone: string;
        address: string;
        coordinates: number[];
        _id: import("bson").ObjectId;
        role: EUserRole;
        vkId?: number;
        vkLink?: string;
        password?: string;
        status: import("./types").UserStatus;
        isBlocked: boolean;
        createdAt: Date;
        updatedAt: Date;
        scores: number;
        permissions?: AdminPermission[];
        completedTasks: number;
        lastActivityDate: Date;
    } & User>;
    updateUser(id: string, updateUserDto: UpdateUserDto): Promise<User>;
    changeStatus(id: string, changeStatusDto: ChangeStatusDto): Promise<Omit<User, 'login'>>;
    giveKey(id: string): Promise<Omit<User, 'login'>>;
    changeAdminPermissions(id: string, changeAdminPermissionsDto: ChangeAdminPermissionsDto): Promise<Omit<User, 'login'>>;
    blockUser(id: string): Promise<Omit<User, 'login'>>;
}
