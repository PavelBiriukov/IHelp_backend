import { MongoRepository } from 'typeorm';
import { ObjectId } from 'mongodb';
import { User } from './entities/user.entity';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { AdminPermission, EUserRole, UserStatus } from './types';
import { CreateAdminDto } from './dto/create-admin.dto';
import { HashService } from '../../src/common/hash/hash.service';
import { GenerateReportDto } from './dto/generate-report.dto';
export declare class UserService {
    private readonly usersRepository;
    private readonly hashService;
    constructor(usersRepository: MongoRepository<User>, hashService: HashService);
    findAll(): Promise<Omit<User, 'login' | 'password'>[]>;
    findBy(query: object): Promise<User[]>;
    createUser(createUserDto: CreateUserDto): Promise<User>;
    createAdmin(createAdminDto: CreateAdminDto): Promise<User>;
    getUserByUsername(fullname: string): Promise<{
        _id: ObjectId;
        fullname: string;
        role: EUserRole;
        vkId?: number;
        vkLink?: string;
        status: UserStatus;
        isBlocked: boolean;
        avatar: string;
        phone: string;
        address: string;
        coordinates: number[];
        createdAt: Date;
        updatedAt: Date;
        scores: number;
        permissions?: AdminPermission[];
        completedTasks: number;
        lastActivityDate: Date;
    }>;
    getUserByLogin(login: string): Promise<User>;
    getUserByVkId(vkId: number): Promise<User>;
    deleteUserById(id: string): Promise<void>;
    findUserById(id: string): Promise<Omit<User, 'login'> | undefined>;
    updateOne(id: string, updateUserDto: UpdateUserDto): Promise<{
        fullname: string;
        login?: string;
        avatar: string;
        phone: string;
        address: string;
        coordinates: number[];
        _id: ObjectId;
        role: EUserRole;
        vkId?: number;
        vkLink?: string;
        password?: string;
        status: UserStatus;
        isBlocked: boolean;
        createdAt: Date;
        updatedAt: Date;
        scores: number;
        permissions?: AdminPermission[];
        completedTasks: number;
        lastActivityDate: Date;
    } & User>;
    changeStatus(id: string, status: UserStatus): Promise<Omit<User, "login">>;
    giveKey(id: string): Promise<Omit<User, "login">>;
    changeAdminPermissions(id: string, permissions: AdminPermission[]): Promise<Omit<User, "login">>;
    blockUser(id: string): Promise<Omit<User, "login">>;
    generateReport({ reportStatus, reportRole }: GenerateReportDto): Promise<User[]>;
}
